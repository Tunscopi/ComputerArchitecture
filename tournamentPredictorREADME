# A) Instructions to Compile and Execute tournamentPredictor.cpp
-       Unzipped AyotundeProject.zip file should contain TournamentPredictor.cpp & tournamentPredictorREADME 
-       l46 (line 46): Enter trace file (to be in same directory as code) here
-	Code prints out final answer X in form â€œMisprediction rate: X%
-       The TournamentPredictor.cpp file is set to the default project required parameters



# B) Alternative Configurations yielding Improvement of prediction
*Results are obtained testing code on large trace file

Default parameters gave misprediction rate of 2.90981% 

1. Misprediction rate: 2.323% 
   Parameters used: 
        Using the last 15 branches for the global predictor and a 32768 (2^15) globalPredictor width, the misprediction rate improves.
	

   Reasoning: 
       Improving the history of the global branch predictor increases branch accuracy, this implies there is a strong consistency in the eventual branch direction over a large number of previous branches. Hence, the trace could represent a program with a series of long predictable sequences as in a scientific calculation

2. Misprediction rate: 2.83401% 
   Parameters used:
	Using an n bit counter of 3 (n=3) i.e changing the selected predictor (saturating counter updates after 3 wrong predictions) and changing prediction (in both local & global predictors after 3 wrong predictions) with all other default parameters fixed.

   REASONING: It is possible, in the trace program given, there was a slower "recovery" of the predictors to the correct/stable value. i.e they got to the right prediction after missing the previous. Also, this implies, there was a well defined branch direction. 
This is because, the lower misprediction rate here suggests that, generally, a single or 2 wrong predictions was probably a "fluke", but instead the execution was flipping more deterministically after 2  mispredictions. Hence, the 3 bit-counter performed better branch prediction accuracy. 
